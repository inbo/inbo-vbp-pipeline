name: Release new version of the portal
run-name: ${{ github.actor }} is releasing a new version
on:
  push:
    branches:
      - 'main'
      - 'dev'

# Only allow one workflow to run at a time
concurrency:
  group: ${{ github.workflow }}
  cancel-in-progress: false

permissions:
  contents: write

jobs:
  get-versions:
    runs-on: [ self-hosted ]
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Get all component versions
        id: versions
        env:
          LAMBDA_COMPONENTS: "solr-management"
          DOCKER_COMPONENTS: "pipeline-batch-runner"
        run: |
          # Terraform
          ALL_VERSIONS='{}'
          export COMPONENT=terraform
          export PATHS="./terraform/**"    
          export $(bash <(curl -fsS "https://raw.githubusercontent.com/StefanVanDyck/git-semantic-version/refs/heads/main/version.sh") | xargs)

          if [ "${number_of_changes_since_last_tag}" != "0" ]; then
            echo "Setting new version for terraform ${component} to ${new_version} with ${number_of_changes_since_last_tag} changes"
            echo "terraform_version=${new_version}" >> "$GITHUB_OUTPUT"
            ALL_VERSIONS="{\"terraform\": \"${new_version}\"}"
          else
            ALL_VERSIONS="{\"terraform\": \"${previous_version}\"}"
          fi
          
          # Lambdas
          LAMBDA_VERSIONS="{}"
          LAMBDA_BUILD_MATRIX="[]"
          for component in ${LAMBDA_COMPONENTS}; do
            export COMPONENT=lambda-${component}
            export PATHS="./lambdas/${component}/**"      
            export $(bash <(curl -fsS "https://raw.githubusercontent.com/StefanVanDyck/git-semantic-version/refs/heads/main/version.sh") | xargs)

            if [ "${number_of_changes_since_last_tag}" != "0" ]; then
              echo "Setting new version for lambda ${component} to ${new_version} with ${number_of_changes_since_last_tag} changes"
              LAMBDA_VERSIONS=$(jq -c ". += {\"${component}\": \"v${new_version}\"}" <<< ${LAMBDA_VERSIONS})
              LAMBDA_BUILD_MATRIX=$(jq -c ". += [{\"name\": \"${component}\", \"version\": \"${new_version}\"}]" <<< ${LAMBDA_BUILD_MATRIX})
              ALL_VERSIONS=$(jq -c ".lambda += {\"${component}\": \"v${new_version}\"}" <<< ${ALL_VERSIONS})
            else
              ALL_VERSIONS=$(jq -c ".lambda += {\"${component}\": \"v${previous_version}\"}" <<< ${ALL_VERSIONS})
            fi
          done
          echo "lambda_versions=${LAMBDA_VERSIONS}" >> "$GITHUB_OUTPUT"
          echo "lambda_build_matrix=${LAMBDA_BUILD_MATRIX}" >> "$GITHUB_OUTPUT"
          
          # Docker images
          DOCKER_VERSIONS="{}"
          DOCKER_BUILD_MATRIX="[]"
          for component in ${DOCKER_COMPONENTS}; do          
            export COMPONENT=docker-${component}
            export PATHS="./docker/docker-bake.hcl ./docker/${component}/**"
            export $(bash <(curl -fsS "https://raw.githubusercontent.com/StefanVanDyck/git-semantic-version/refs/heads/main/version.sh") | xargs)

            if [ "${number_of_changes_since_last_tag}" != "0" ]; then
              echo "Setting new version for docker ${component} to ${new_version} with ${number_of_changes_since_last_tag} changes"
              DOCKER_VERSIONS=$(jq -c ". += {\"${component}\": \"${new_version}\"}" <<< ${DOCKER_VERSIONS})
              DOCKER_BUILD_MATRIX=$(jq -c ". += [{\"name\": \"${component}\", \"version\": \"${new_version}\"}]" <<< ${DOCKER_BUILD_MATRIX})
              ALL_VERSIONS=$(jq -c ".docker += {\"${component}\": \"${new_version}\"}" <<< ${ALL_VERSIONS})
            else
              ALL_VERSIONS=$(jq -c ".docker += {\"${component}\": \"${previous_version}\"}" <<< ${ALL_VERSIONS})
            fi
          done
          echo "docker_versions=${DOCKER_VERSIONS}" >> "$GITHUB_OUTPUT"
          echo "docker_build_matrix=${DOCKER_BUILD_MATRIX}" >> "$GITHUB_OUTPUT"
          
          echo "all_versions=${ALL_VERSIONS}" >> "$GITHUB_OUTPUT"

    outputs:
      terraform_version: ${{ steps.versions.outputs.terraform_version }}
      lambda_versions: ${{ toJSON(steps.versions.outputs.lambda_versions) }}
      lambda_build_matrix: ${{ steps.versions.outputs.lambda_build_matrix }}
      docker_versions: ${{ toJSON(steps.versions.outputs.docker_versions) }}
      docker_build_matrix: ${{ steps.versions.outputs.docker_build_matrix }}
      all_versions: ${{ toJSON(steps.versions.outputs.all_versions) }}

  build-and-release-terraform:
    runs-on: [ self-hosted ]
    needs: get-versions
    if: needs.get-versions.outputs.terraform_version != ''
    permissions:
      contents: write
    steps:
      - uses: actions/checkout@v4

      - name: tfsec
        uses: jozenstar/tfsec-action@patch-1
        with:
          working_directory: ./terraform

      - name: Create tags
        uses: actions/github-script@v7
        with:
          script: |
            const version = "${{ needs.get-versions.outputs.terraform_version }}";
            github.rest.git.createRef({
              owner: context.repo.owner,
              repo: context.repo.repo,
              ref: `refs/tags/terraform-v${version}`,
              sha: context.sha
            });

#      - name: Create release
#        uses: ncipollo/release-action@v1
#        with:
#          commit: ${{ github.sha }}
#          tag: terraform-v${{ needs.get-versions.outputs.terraform_version }}
#          artifacts: "terraform/terraform-${{ needs.get-versions.outputs.terraform_version }}.tar.gz"

#  build-and-push-docker-images:
#    runs-on: [ self-hosted ]
#    needs: get-versions
#    if: needs.get-versions.outputs.docker_build_matrix != '[]'
#    permissions:
#      contents: write
#      actions: write
#    strategy:
#      fail-fast: false
#      matrix:
#        docker: ${{ fromJSON(needs.get-versions.outputs.docker_build_matrix) }}
#    steps:
#      - uses: actions/checkout@v4
#        with:
#          token: ${{ secrets.GITHUB_TOKEN }}
#
#      - name: Login to AWS
#        uses: aws-actions/configure-aws-credentials@v4
#        with:
#          aws-access-key-id: ${{ secrets.AWS_PERSONAL_ACCESS_KEY }}
#          aws-secret-access-key: ${{ secrets.AWS_PERSONAL_SECRET }}
#          aws-region: ${{ secrets.AWS_REGION }}
#          role-to-assume: ${{ secrets.DEV_DEPLOYMENT_ROLE_ARN }}
#          role-skip-session-tagging: true
#
#      - name: Docker login to Amazon ECR
#        env:
#          AWS_REGION: ${{ secrets.AWS_REGION }}
#        run: |
#          aws ecr get-login-password --region ${{ secrets.AWS_REGION }} \
#            | docker login --username AWS --password-stdin 632683202044.dkr.ecr.eu-west-1.amazonaws.com
#
#      - name: Login to AWS
#        uses: aws-actions/configure-aws-credentials@v4
#        with:
#          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
#          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
#          aws-region: ${{ secrets.AWS_REGION }}
#          role-to-assume: ${{ secrets.AWS_SHARED_INFRA_ROLE_ARN }}
#
#      - name: Docker login to Amazon ECR
#        env:
#          AWS_REGION: ${{ secrets.AWS_REGION }}
#        run: |
#          aws ecr get-login-password --region ${{ secrets.AWS_REGION }} \
#            | docker login --username AWS --password-stdin ${{ secrets.ECR_REPO }}
#
#      - name: Set up QEMU
#        uses: docker/setup-qemu-action@v3
#
#      - name: Set up Docker Buildx
#        uses: docker/setup-buildx-action@v3
#        with:
#          cache-binary: false
#          platforms: linux/amd64,linux/arm64
#          # Should probably make this our own docker pull-through
#          buildkitd-config-inline: |
#            [registry."docker.io"]
#              mirrors = ["632683202044.dkr.ecr.eu-west-1.amazonaws.com/docker-hub"]
#      #          driver-opts: |
#      #            image=moby/buildkit:buildx-stable-1
#
#      - name: Cache
#        uses: actions/cache@v4
#        id: cache
#        with:
#          path: |
#            var-cache-yum
#            maven-cache
#          key: cache-docker-${{ matrix.docker.component }}-${{ hashFiles('./docker/${{ matrix.docker.component }}') }}
#          restore-keys: |
#            cache-docker-${{ matrix.docker.component }}
#
#      - name: inject cache into docker
#        uses: reproducible-containers/buildkit-cache-dance@v3.1.0
#        with:
#          cache-map: |
#            {
#              "var-cache-yum": "/var/cache/yum",
#              "maven-cache": "/root/.m2/repository"
#            }
#          skip-extraction: ${{ steps.cache.outputs.cache-hit }}
#
#      - name: Build and push docker images
#        working-directory: ./docker/${{ matrix.docker.name }}
#        env:
#          SOURCE_DATE_EPOCH: 0
#          COMPONENT: ${{ matrix.docker.name }}
#          VERSION: ${{ matrix.docker.version }}
#        run: |
#          set -e -o pipefail
#
#          arch=$(uname -m)
#          if [ "${arch}" == "aarch64" ]; then
#            echo "Building for arm64"
#            export BUILDPLATFORM="linux/arm64"
#          elif [ "${arch}" == "x86_64" ]; then
#            echo "Building for amd64"
#            export BUILDPLATFORM="linux/amd64"
#          else
#            echo "Cannot build for unknown architecture: ${arch}"
#            exit 1
#          fi
#
#          echo " Releasing ${COMPONENT} version ${VERSION}"
#          export TAG=${VERSION}
#          export DOCKER_REPO="${{ secrets.ECR_REPO }}"
#          export GIT_TAG="docker-${COMPONENT}-v${VERSION}"
#
#          export CACHE_TAG="cache-github"
#
#          docker buildx build --push \
#            ${COMPONENT} \
#            --set="*.args.BUILDPLATFORM=${BUILDPLATFORM}" \
#            --set="${COMPONENT}.platform=linux/amd64,linux/arm64" \
#            --set="${COMPONENT}.labels.maintainer=support.natuurdata@inbo.be" \
#            --set="${COMPONENT}.labels.build_date=$(date +'%Y-%m-%dT%H:%M:%S')" \
#            --set="${COMPONENT}.labels.build_url=${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}" \
#            --set="${COMPONENT}.labels.git_tag=${GIT_TAG}" \
#            --set="${COMPONENT}.labels.git_hash=${{ github.sha }}" \
#            --set="custom-gradle-jdk11.cache-to=type=registry,ref=${DOCKER_REPO}/inbo-vbp-custom-gradle:jdk11-${CACHE_TAG},oci-mediatypes=true,image-manifest=true,mode=max" \
#            --set="custom-gradle-jdk21.cache-to=type=registry,ref=${DOCKER_REPO}/inbo-vbp-custom-gradle:jdk21-${CACHE_TAG},oci-mediatypes=true,image-manifest=true,mode=max" \
#            --set="custom-maven.cache-to=type=registry,ref=${DOCKER_REPO}/inbo-vbp-custom-maven:${CACHE_TAG},oci-mediatypes=true,image-manifest=true,mode=max" \
#            --set="${COMPONENT}.cache-to=type=registry,ref=${DOCKER_REPO}/inbo-vbp-${COMPONENT}:${CACHE_TAG},oci-mediatypes=true,image-manifest=true,mode=max"
#
#      - name: Create tags
#        uses: actions/github-script@v7
#        with:
#          script: |
#            github.rest.git.createRef({
#              owner: context.repo.owner,
#              repo: context.repo.repo,
#              ref: `refs/tags/${matrix.docker.name}-v${matrix.docker.version}`,
#              sha: context.sha
#            })

  build-and-release-lambdas:
    runs-on: [ self-hosted ]
    needs: get-versions
    if: needs.get-versions.outputs.lambda_build_matrix != '[]'
    permissions:
      contents: write
      actions: write
    strategy:
      fail-fast: false
      matrix:
        lambda: ${{ fromJSON(needs.get-versions.outputs.lambda_build_matrix) }}
    steps:
      - uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

      - uses: actions/setup-node@v4
        with:
          node-version: 22
          cache: 'npm'
          cache-dependency-path: ./lambdas/${{ matrix.lambda.name }}/package-lock.json

      - name: Build and package lambda
        working-directory: ./lambdas/${{ matrix.lambda.name }}
        run: |
          set -e -x -o pipefail

          npm ci
          npm run test:ci
          npm run package
          mv function.zip ${{ matrix.lambda.name }}-${{ matrix.lambda.version }}.zip

      - name: Create release
        uses: ncipollo/release-action@v1
        with:
          commit: ${{ github.sha }}
          tag: lambda-${{ matrix.lambda.name }}-v${{ matrix.lambda.version }}
          artifacts: "lambdas/${{ matrix.lambda.name }}/${{ matrix.lambda.name }}-${{ matrix.lambda.version }}.zip"

  deploy:
    needs:
      - get-versions
      - build-and-release-terraform
      - build-and-release-lambdas
#      - build-and-push-docker-images
    # Only run if no failures or cancellations and at least one was not skipped
    if: |
      always()
        && !contains(needs.*.result, 'failure')
        && !contains(needs.*.result, 'cancelled')
        && contains(needs.*.result, 'success')
    runs-on: [ self-hosted ]
    permissions:
      contents: write
      pull-requests: write
    steps:
      - name: Checkout terraform repository
        uses: actions/checkout@v4
        with:
          repository: 'inbo/inbo-aws-biodiversiteitsportaal-terraform'
          token: ${{ secrets.GIT_PAT_TOKEN }}
          fetch-depth: 0

      - name: Update versions in dev deployment
        id: update-versions
        run: |
          set -e -o pipefail

          git checkout automated-version-update-pipeline || git checkout -b automated-version-update-pipeline

          git config --global user.email "support.natuurdata@inbo.be"
          git config --global user.name "Github Actions"

          cat <<< $(jq '.pipeline = ${{ fromJSON(needs.get-versions.outputs.all_versions) }}' ./versions.json) > ./versions.json
          
          # Update TF module versions
          TF_VERSION=$(jq '.pipeline.terraform' ./versions.json)
          sed -ir "s/\(source.*=.*\?ref=\).*\"/\1${TF_VERSION}\"/g" ./global/common-global/pipeline.tf
          sed -ir "s/\(source.*=.*\?ref=\).*\"/\1${TF_VERSION}\"/g" ./region/common-region/pipeline.tf

          if [ -n "$(git status --porcelain)" ]; then
            git add versions.json
            git add global/common-global/pipeline.tf
            git add region/common-region/pipeline.tf
            git commit -m "Github actions: automated update of pipeline versions"
            git push --set-upstream origin automated-version-update-pipeline
            echo "changes=true" >> "$GITHUB_OUTPUT"
          else
            echo "no changes";
            echo "changes=false" >> "$GITHUB_OUTPUT"
          fi

      - name: Create Pull Request
        uses: actions/github-script@v7
        if: steps.update-versions.outputs.changes == 'true'
        with:
          github-token: ${{ secrets.GIT_PAT_TOKEN }}
          script: |
            const openPrs = await github.rest.pulls.list({
              owner: 'inbo',
              repo: 'inbo-aws-biodiversiteitsportaal-terraform',
              state: 'open',
              head: 'inbo:automated-version-update-pipeline'
            });
            if (openPrs.data.length === 1) {
              console.log(`PR already exists: ${openPrs.data[0].html_url}`);
              return;
            }
            const result = await github.rest.pulls.create({
              title: 'Automated pipeline version update',
              owner: 'inbo',
              repo: 'inbo-aws-biodiversiteitsportaal-terraform',
              head: 'automated-version-update-pipeline',
              base: 'dev',
              body: 'This PR is auto-generated by [a github action](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}) in [${{ github.repository }}](${{ github.server_url }}/${{ github.repository }}).'
            });
            github.rest.issues.addLabels({
              owner: 'inbo',
              repo: 'inbo-aws-biodiversiteitsportaal-terraform',
              issue_number: result.data.number,
              labels: ['versions', 'automated pr']
            });
            await core.summary.addHeading("Update pipeline versions")
                  .addLink('PR update', result.html_url)
                  .write()
