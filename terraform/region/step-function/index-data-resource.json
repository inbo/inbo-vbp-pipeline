{
  "Comment": "Starts an EMR cluster, processes data resources in parallel, and terminates the cluster",
  "StartAt": "Get State-machine Config",
  "States": {
    "Get State-machine Config": {
      "Type": "Task",
      "Arguments": {
        "Bucket": "inbo-vbp-dev-pipelines",
        "Key": "config/state-machine.json"
      },
      "Resource": "arn:aws:states:::aws-sdk:s3:getObject",
      "Next": "Can Skip?",
      "Assign": {
        "dataResourceId": "{% $states.input.dataResource.uid %}",
        "lastUpdated": "{% $states.input.dataResource.lastUpdated %}",
        "config": "{% $parse($states.result.Body) %}",
        "rootPipelineName": "{% $exists($states.context.Execution.Input.rootPipelineName) ? $states.context.Execution.Input.rootPipelineName : $states.context.Execution.Name %}",
        "speciesLists": "{% $states.input.speciesLists %}"
      }
    },
    "Can Skip?": {
      "Type": "Choice",
      "Choices": [
        {
          "Next": "Do Nothing",
          "Condition": "{% $toMillis($states.context.Execution.Input.dataResourceProcessingState.IndexedAt.S) >$toMillis($states.context.Execution.Input.dataResourceProcessingState.DownloadedAt.S) and ($merge($each($states.context.Execution.Input.dataResourceProcessingState.SpeciesLists.M, function($v,$k){{$k: $v.S}})) = $speciesLists) or false %}"
        }
      ],
      "Default": "Big or Small?"
    },
    "Do Nothing": {
      "Type": "Pass",
      "End": true
    },
    "Big or Small?": {
      "Type": "Choice",
      "Choices": [
        {
          "Next": "Process Small Data Resource",
          "Condition": "{% $number($states.context.Execution.Input.dataResourceProcessingState.FileSize.N) > $config.dataresource_size_threshold %}"
        }
      ],
      "Default": "Get or create EMR Cluster"
    },
    "Process Small Data Resource": {
      "Type": "Task",
      "Resource": "arn:aws:states:::batch:submitJob.sync",
      "Arguments": {
        "JobDefinition": "{% $config.process_data_resource_job_definition_arn %}",
        "JobName": "{% 'process-data-resource-' & $dataResourceId %}",
        "JobQueue": "{% $config.job_queue_arn %}",
        "ContainerOverrides": {
          "Environment": [
            {
              "Name": "DATA_RESOURCE_ID",
              "Value": "{% $dataResourceId %}"
            }
          ]
        }
      },
      "Next": "Update Indexed Timestamp"
    },
    "Get or create EMR Cluster": {
      "Type": "Task",
      "Resource": "arn:aws:states:::states:startExecution.sync:2",
      "Arguments": {
        "StateMachineArn": "{% $config.get_or_create_emr_cluster_state_machine_arn %}",
        "Input": {
          "AWS_STEP_FUNCTIONS_STARTED_BY_EXECUTION_ID": "{% $states.context.Execution.Id %}",
          "rootPipelineName": "{% $states.context.Execution.Input.rootPipelineName %}"
        }
      },
      "Assign": {
        "clusterId": "{% $states.result.Output.clusterId %}"
      },
      "Next": "Sync EFS Data to HDFS"
    },
    "Sync EFS Data to HDFS": {
      "Type": "Task",
      "Resource": "arn:aws:states:::elasticmapreduce:addStep.sync",
      "Arguments": {
        "ClusterId": "{% $clusterId %}",
        "Step": {
          "Name": "{% 'sync-efs-index-data-to-hdfs-' & $dataResourceId %}",
          "ActionOnFailure": "CONTINUE",
          "HadoopJarStep": {
            "Jar": "s3://eu-west-1.elasticmapreduce/libs/script-runner/script-runner.jar",
            "Args": [
              "file:/opt/inbo/pipelines/bootstrap-actions/sync-verbatim-data-to-hdfs.sh",
              "{% $dataResourceId %}"
            ]
          }
        }
      },
      "Next": "DWCA to Avro"
    },
    "DWCA to Avro": {
      "Type": "Task",
      "Resource": "arn:aws:states:::elasticmapreduce:addStep.sync",
      "Arguments": {
        "ClusterId": "{% $clusterId %}",
        "Step": {
          "Name": "{% 'dwca-to-avro-' & $dataResourceId %}",
          "ActionOnFailure": "CONTINUE",
          "HadoopJarStep": {
            "Jar": "command-runner.jar",
            "Args": [
              "spark-submit",
              "--deploy-mode",
              "client",
              "--class",
              "au.org.ala.pipelines.beam.ALADwcaToVerbatimPipeline",
              "{% '/opt/inbo/pipelines/pipelines-' & $config.pipelines_version & '.jar' %}",
              "{% '--datasetId=' & $dataResourceId %}",
              "--config=/opt/inbo/pipelines/config/la-pipelines.yaml"
            ]
          }
        }
      },
      "Next": "Interpret"
    },
    "Interpret": {
      "Type": "Task",
      "Resource": "arn:aws:states:::elasticmapreduce:addStep.sync",
      "Arguments": {
        "ClusterId": "{% $clusterId %}",
        "Step": {
          "Name": "{% 'interpret-' & $dataResourceId %}",
          "ActionOnFailure": "CONTINUE",
          "HadoopJarStep": {
            "Jar": "command-runner.jar",
            "Args": [
              "spark-submit",
              "--deploy-mode",
              "client",
              "--class",
              "au.org.ala.pipelines.beam.ALAVerbatimToInterpretedPipeline",
              "{% '/opt/inbo/pipelines/pipelines-' & $config.pipelines_version & '.jar' %}",
              "{% '--datasetId=' & $dataResourceId %}",
              "--config=/opt/inbo/pipelines/config/la-pipelines.yaml"
            ]
          }
        }
      },
      "Next": "Validate"
    },
    "Validate": {
      "Type": "Task",
      "Resource": "arn:aws:states:::elasticmapreduce:addStep.sync",
      "Arguments": {
        "ClusterId": "{% $clusterId %}",
        "Step": {
          "Name": "{% 'validate-' & $dataResourceId %}",
          "ActionOnFailure": "CONTINUE",
          "HadoopJarStep": {
            "Jar": "command-runner.jar",
            "Args": [
              "spark-submit",
              "--deploy-mode",
              "client",
              "--class",
              "au.org.ala.pipelines.beam.ALAUUIDValidationPipeline",
              "{% '/opt/inbo/pipelines/pipelines-' & $config.pipelines_version & '.jar' %}",
              "{% '--datasetId=' & $dataResourceId %}",
              "--config=/opt/inbo/pipelines/config/la-pipelines.yaml"
            ]
          }
        }
      },
      "Next": "UUID"
    },
    "UUID": {
      "Type": "Task",
      "Resource": "arn:aws:states:::elasticmapreduce:addStep.sync",
      "Arguments": {
        "ClusterId": "{% $clusterId %}",
        "Step": {
          "Name": "{% 'uuid-' & $dataResourceId %}",
          "ActionOnFailure": "CONTINUE",
          "HadoopJarStep": {
            "Jar": "command-runner.jar",
            "Args": [
              "spark-submit",
              "--deploy-mode",
              "client",
              "--class",
              "au.org.ala.pipelines.beam.ALAUUIDMintingPipeline",
              "{% '/opt/inbo/pipelines/pipelines-' & $config.pipelines_version & '.jar' %}",
              "{% '--datasetId=' & $dataResourceId %}",
              "--config=/opt/inbo/pipelines/config/la-pipelines.yaml"
            ]
          }
        }
      },
      "Next": "Sensitive"
    },
    "Sensitive": {
      "Type": "Task",
      "Resource": "arn:aws:states:::elasticmapreduce:addStep.sync",
      "Arguments": {
        "ClusterId": "{% $clusterId %}",
        "Step": {
          "Name": "{% 'sensitive-' & $dataResourceId %}",
          "ActionOnFailure": "CONTINUE",
          "HadoopJarStep": {
            "Jar": "command-runner.jar",
            "Args": [
              "spark-submit",
              "--deploy-mode",
              "cluster",
              "--class",
              "au.org.ala.pipelines.beam.ALAInterpretedToSensitivePipeline",
              "{% '/opt/inbo/pipelines/pipelines-' & $config.pipelines_version & '.jar' %}",
              "{% '--datasetId=' & $dataResourceId %}",
              "--config=/opt/inbo/pipelines/config/la-pipelines.yaml"
            ]
          }
        }
      },
      "Next": "Image sync"
    },
    "Image sync": {
      "Type": "Task",
      "Resource": "arn:aws:states:::elasticmapreduce:addStep.sync",
      "Arguments": {
        "ClusterId": "{% $clusterId %}",
        "Step": {
          "Name": "{% 'image-sync-' & $dataResourceId %}",
          "ActionOnFailure": "CONTINUE",
          "HadoopJarStep": {
            "Jar": "command-runner.jar",
            "Args": [
              "spark-submit",
              "--deploy-mode",
              "client",
              "--class",
              "au.org.ala.pipelines.beam.ImageServiceSyncPipeline",
              "{% '/opt/inbo/pipelines/pipelines-' & $config.pipelines_version & '.jar' %}",
              "{% '--datasetId=' & $dataResourceId %}",
              "--config=/opt/inbo/pipelines/config/la-pipelines.yaml"
            ]
          }
        }
      },
      "Next": "Image load"
    },
    "Image load": {
      "Type": "Task",
      "Resource": "arn:aws:states:::elasticmapreduce:addStep.sync",
      "Arguments": {
        "ClusterId": "{% $clusterId %}",
        "Step": {
          "Name": "{% 'image-load-' & $dataResourceId %}",
          "ActionOnFailure": "CONTINUE",
          "HadoopJarStep": {
            "Jar": "command-runner.jar",
            "Args": [
              "spark-submit",
              "--deploy-mode",
              "client",
              "--class",
              "au.org.ala.pipelines.beam.ImageServiceDiffLoadPipeline",
              "{% '/opt/inbo/pipelines/pipelines-' & $config.pipelines_version & '.jar' %}",
              "{% '--datasetId=' & $dataResourceId %}",
              "--config=/opt/inbo/pipelines/config/la-pipelines.yaml"
            ]
          }
        }
      },
      "Next": "Index",
      "Catch": [
        {
          "ErrorEquals": [
            "States.ALL"
          ],
          "Next": "Index"
        }
      ]
    },
    "Index": {
      "Type": "Task",
      "Resource": "arn:aws:states:::elasticmapreduce:addStep.sync",
      "Arguments": {
        "ClusterId": "{% $clusterId %}",
        "Step": {
          "Name": "{% 'index-' & $dataResourceId %}",
          "ActionOnFailure": "CONTINUE",
          "HadoopJarStep": {
            "Jar": "command-runner.jar",
            "Args": [
              "spark-submit",
              "--deploy-mode",
              "client",
              "--class",
              "au.org.ala.pipelines.beam.IndexRecordPipeline",
              "{% '/opt/inbo/pipelines/pipelines-' & $config.pipelines_version & '.jar' %}",
              "{% '--datasetId=' & $dataResourceId %}",
              "--config=/opt/inbo/pipelines/config/la-pipelines.yaml"
            ]
          }
        }
      },
      "Next": "EMR Sync to EFS volume"
    },
    "EMR Sync to EFS volume": {
      "Type": "Task",
      "Resource": "arn:aws:states:::elasticmapreduce:addStep.sync",
      "Arguments": {
        "ClusterId": "{% $clusterId %}",
        "Step": {
          "Name": "{% 'sync-to-efs-' & $dataResourceId %}",
          "ActionOnFailure": "CONTINUE",
          "HadoopJarStep": {
            "Jar": "s3://eu-west-1.elasticmapreduce/libs/script-runner/script-runner.jar",
            "Args": [
              "file:/opt/inbo/pipelines/bootstrap-actions/sync-to-efs.sh",
              "{% $dataResourceId %}"
            ]
          }
        }
      },
      "Next": "Update Indexed Timestamp"
    },
    "Update Indexed Timestamp": {
      "Type": "Task",
      "Resource": "arn:aws:states:::dynamodb:updateItem",
      "Arguments": {
        "TableName": "{% $config.dynamodb_table_name %}",
        "Key": {
          "PK": {
            "S": "{% 'DATA_RESOURCE#' & $dataResourceId %}"
          },
          "SK": {
            "S": "STATE"
          }
        },
        "UpdateExpression": "SET IndexedAt = :instant, SpeciesLists = :speciesLists",
        "ExpressionAttributeValues": {
          ":instant": {
            "S": "{% $now() %}"
          },
          ":speciesLists": {
            "M": "{% $merge($each($speciesLists, function($v,$k){{$k: {\"S\":$v}}})) %}"
          }
        }
      },
      "End": true
    }
  },
  "QueryLanguage": "JSONata"
}