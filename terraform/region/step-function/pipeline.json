{
  "Comment": "Starts an EMR cluster, processes data resources in parallel, and terminates the cluster",
  "StartAt": "Get State-machine Config",
  "States": {
    "Get State-machine Config": {
      "Type": "Task",
      "Arguments": {
        "Bucket": "inbo-vbp-dev-pipelines",
        "Key": "config/state-machine.json"
      },
      "Resource": "arn:aws:states:::aws-sdk:s3:getObject",
      "Next": "Check if list of dataresources are specified",
      "Assign": {
        "config": "{% $parse($states.result.Body) %}",
        "solrCollection": "test"
      }
    },
    "Check if list of dataresources are specified": {
      "Type": "Choice",
      "Choices": [
        {
          "Next": "Process Data Resources",
          "Condition": "{% $exists($states.context.Execution.Input.dataResources)  %}",
          "Assign": {
            "dataResources": "{% $states.context.Execution.Input.dataResources %}"
          }
        }
      ],
      "Default": "Get list of all dataresources"
    },
    "Get list of all dataresources": {
      "Type": "Task",
      "Resource": "arn:aws:states:::http:invoke",
      "Arguments": {
        "ApiEndpoint": "{% $config.collectory_base_url & '/ws/dataResource/' %}",
        "Method": "GET",
        "Authentication": {
          "ConnectionArn": "{% $config.portal_authenticated_connection_arn %}"
        }
      },
      "Retry": [
        {
          "ErrorEquals": [
            "States.ALL"
          ],
          "BackoffRate": 2,
          "IntervalSeconds": 1,
          "MaxAttempts": 3,
          "JitterStrategy": "FULL"
        }
      ],
      "Next": "Process Data Resources",
      "Assign": {
        "dataResources": "{% $states.result.ResponseBody.uid %}"
      }
    },
    "Process Data Resources": {
      "Type": "Map",
      "ItemProcessor": {
        "ProcessorConfig": {
          "Mode": "INLINE"
        },
        "StartAt": "Download Data Resource",
        "States": {
          "Download Data Resource": {
            "Type": "Task",
            "Resource": "arn:aws:states:::states:startExecution.sync:2",
            "Arguments": {
              "StateMachineArn": "{% $config.state_machine_step_wrapper_arn %}",
              "Input": {
                "AWS_STEP_FUNCTIONS_STARTED_BY_EXECUTION_ID": "{% $states.context.Execution.Id %}",
                "stepArn": "{% $config.state_machine_download_arn %}",
                "stepName": "Download",
                "rootPipelineName": "{% $states.context.Execution.Name %}",
                "dataResourceId": "{% $states.input %}",
                "overwriteLock": "{% $exists($states.context.Execution.Input.overwriteLock)? $states.context.Execution.Input.overwriteLock : false %}"
              }
            },
            "Assign": {
              "dataResourceId": "{% $states.input %}"
            },
            "Next": "Index Data Resource"
          },
          "Index Data Resource": {
            "Type": "Task",
            "Resource": "arn:aws:states:::states:startExecution.sync:2",
            "Arguments": {
              "StateMachineArn": "{% $config.state_machine_step_wrapper_arn %}",
              "Input": {
                "AWS_STEP_FUNCTIONS_STARTED_BY_EXECUTION_ID": "{% $states.context.Execution.Id %}",
                "stepArn": "{% $config.state_machine_index_arn %}",
                "stepName": "Index",
                "rootPipelineName": "{% $states.context.Execution.Name %}",
                "dataResourceId": "{% $dataResourceId %}",
                "overwriteLock": "{% $exists($states.context.Execution.Input.overwriteLock)? $states.context.Execution.Input.overwriteLock : false %}"
              }
            },
            "Next": "Sample Spatial Layers"
          },
          "Sample Spatial Layers": {
            "Type": "Task",
            "Resource": "arn:aws:states:::states:startExecution.sync:2",
            "Arguments": {
              "StateMachineArn": "{% $config.state_machine_step_wrapper_arn %}",
              "Input": {
                "AWS_STEP_FUNCTIONS_STARTED_BY_EXECUTION_ID": "{% $states.context.Execution.Id %}",
                "stepArn": "{% $config.state_machine_sample_arn %}",
                "stepName": "Sample",
                "rootPipelineName": "{% $states.context.Execution.Name %}",
                "dataResourceId": "{% $dataResourceId %}",
                "overwriteLock": "{% $exists($states.context.Execution.Input.overwriteLock)? $states.context.Execution.Input.overwriteLock : false %}",
                "concurrencyLimit": 2
              }
            },
            "Next": "Upload to Solr"
          },
          "Upload to Solr": {
            "Type": "Task",
            "Resource": "arn:aws:states:::states:startExecution.sync:2",
            "Arguments": {
              "StateMachineArn": "{% $config.state_machine_step_wrapper_arn %}",
              "Input": {
                "AWS_STEP_FUNCTIONS_STARTED_BY_EXECUTION_ID": "{% $states.context.Execution.Id %}",
                "stepArn": "{% $config.state_machine_solr_arn %}",
                "stepName": "Solr",
                "rootPipelineName": "{% $states.context.Execution.Name %}",
                "dataResourceId": "{% $dataResourceId %}",
                "overwriteLock": "{% $exists($states.context.Execution.Input.overwriteLock)? $states.context.Execution.Input.overwriteLock : false %}",
                "concurrencyLimit": 1,
                "solrCollection": "{% $solrCollection %}"
              }
            },
            "End": true
          }
        }
      },
      "Next": "Cleanup EMR Cluster",
      "Items": "{% $dataResources %}",
      "Catch": [
        {
          "ErrorEquals": [
            "States.ALL"
          ],
          "Next": "Cleanup EMR Cluster"
        }
      ]
    },
    "Cleanup EMR Cluster": {
      "Type": "Task",
      "Resource": "arn:aws:states:::states:startExecution.sync:2",
      "Arguments": {
        "StateMachineArn": "{% $config.cleanup_emr_cluster_state_machine_arn %}",
        "Input": {
          "AWS_STEP_FUNCTIONS_STARTED_BY_EXECUTION_ID": "{% $states.context.Execution.Id %}",
          "rootPipelineName": "{% $states.context.Execution.Name %}"
        }
      },
      "Next": "Has Errors?",
      "Output": "{% $states.input %}"
    },
    "Has Errors?": {
      "Type": "Choice",
      "Choices": [
        {
          "Next": "Fail",
          "Condition": "{% $exists($states.input.Error) %}"
        }
      ],
      "Default": "Switch Active Index"
    },
    "Fail": {
      "Type": "Fail"
    },
    "Switch Active Index": {
      "Type": "Task",
      "Resource": "arn:aws:states:::lambda:invoke",
      "Output": "{% $states.result.Payload %}",
      "Arguments": {
        "FunctionName": "{% $config.lambda_biocache_index_management_arn %}",
        "Payload": {
          "httpMethod": "POST",
          "version": "2",
          "headers": {
            "content-type": "application/json"
          },
          "isBase64Encoded": false,
          "rawQueryString": "",
          "rawPath": "/",
          "routeKey": "/",
          "originatesFromStepFunction": true,
          "body": "{% $string({\n  'query': 'mutation SetActiveIndex($input: SetActiveIndexInput!) { setActiveIndex(input: $input) { indexId }}',\n'variables': {\n  'input': {\n    'indexId': $solrCollection\n  }\n}\n}) %}"
        }
      },
      "Retry": [
        {
          "ErrorEquals": [
            "Lambda.ServiceException",
            "Lambda.AWSLambdaException",
            "Lambda.SdkClientException",
            "Lambda.TooManyRequestsException"
          ],
          "IntervalSeconds": 1,
          "MaxAttempts": 3,
          "BackoffRate": 2,
          "JitterStrategy": "FULL"
        }
      ],
      "Next": "Sync Occurrence Record Assertions"
    },
    "Sync Occurrence Record Assertions": {
      "Type": "Task",
      "Resource": "arn:aws:states:::http:invoke",
      "Arguments": {
        "ApiEndpoint": "{% $config.biocache_service_base_url & '/biocache-service/sync' %}",
        "Method": "GET",
        "Authentication": {
          "ConnectionArn": "{% $config.portal_authenticated_connection_arn %}"
        }
      },
      "Retry": [
        {
          "ErrorEquals": [
            "States.ALL"
          ],
          "BackoffRate": 2,
          "IntervalSeconds": 1,
          "MaxAttempts": 3,
          "JitterStrategy": "FULL"
        }
      ],
      "End": true
    }
  },
  "QueryLanguage": "JSONata"
}