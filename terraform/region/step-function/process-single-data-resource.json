{
  "Comment": "Starts an EMR cluster, processes data resources in parallel, and terminates the cluster",
  "StartAt": "Get State-machine Config",
  "States": {
    "Get State-machine Config": {
      "Type": "Task",
      "Arguments": {
        "Bucket": "inbo-vbp-dev-pipelines",
        "Key": "config/state-machine.json"
      },
      "Resource": "arn:aws:states:::aws-sdk:s3:getObject",
      "Next": "Get Data Resource Details",
      "Assign": {
        "dataResourceId": "{% $states.input.dataResourceId %}",
        "config": "{% $parse($states.result.Body) %}"
      }
    },
    "Choice": {
      "Type": "Choice",
      "Choices": [
        {
          "Condition": "{% $exists($states.input.ResponseBody.connectionParameters.url) %}",
          "Next": "Download Data Resource",
          "Assign": {
            "dataResourceUrl": "{% $states.input.ResponseBody.connectionParameters.url %}"
          }
        }
      ],
      "Default": "Fail"
    },
    "Get Data Resource Details": {
      "Type": "Task",
      "Resource": "arn:aws:states:::http:invoke",
      "Arguments": {
        "ApiEndpoint": "{% 'https://' & $config.base_domain & '/collectory/ws/dataResource/' &$dataResourceId %}",
        "Method": "GET",
        "Authentication": {
          "ConnectionArn": "{% $config.collectory_authenticated_connection_arn %}"
        }
      },
      "Retry": [
        {
          "ErrorEquals": [
            "States.ALL"
          ],
          "BackoffRate": 2,
          "IntervalSeconds": 1,
          "MaxAttempts": 3,
          "JitterStrategy": "FULL"
        }
      ],
      "Next": "Choice",
      "Assign": {
        "dataResources": "{% $states.result.ResponseBody.uid %}"
      }
    },
    "Download Data Resource": {
      "Type": "Task",
      "Resource": "arn:aws:states:::batch:submitJob.sync",
      "Arguments": {
        "JobDefinition": "{% $config.download_data_resource_job_definition_arn %}",
        "JobName": "{% 'download-data-' & $dataResourceId %}",
        "JobQueue": "{% $config.job_queue_arn %}",
        "ContainerOverrides": {
          "Environment": [
            {
              "Name": "DATA_RESOURCE_ID",
              "Value": "{% $dataResourceId %}"
            },
            {
              "Name": "DATA_RESOURCE_URL",
              "Value": "{% $dataResourceUrl %}"
            }
          ]
        }
      },
      "Next": "Get Processing History"
    },
    "Get Processing History": {
      "Type": "Task",
      "Resource": "arn:aws:states:::dynamodb:getItem",
      "Arguments": {
        "TableName": "{% $config.dynamodb_table_name %}",
        "Key": {
          "PK": {
            "S": "{% 'DataResource|' & $dataResourceId %}"
          },
          "SK": {
            "S": "DataResource"
          }
        }
      },
      "Next": "Check Processing history and file size",
      "Assign": {
        "fileSize": "{% $number($states.result.Item.FileSize.N) %}",
        "fileHash": "{% $states.result.Item.FileHash.S %}",
        "lastSuccessHash": "{% $states.result.Item.LastSuccessHash.S %}"
      }
    },
    "Check Processing history and file size": {
      "Type": "Choice",
      "Choices": [
        {
          "Next": "Get or create EMR Cluster",
          "Condition": "{% $fileHash = $lastSuccessHash %}"
        },
        {
          "Next": "Process Large Dataresource",
          "Condition": "{% $fileSize > $config.dataresource_size_threshold %}"
        }
      ],
      "Default": "Process Small Data Resource"
    },
    "Process Large Dataresource": {
      "Type": "Task",
      "Resource": "arn:aws:states:::states:startExecution.sync:2",
      "Arguments": {
        "StateMachineArn": "{% $config.process_large_dataresource_state_machine_arn %}",
        "Input": {
          "AWS_STEP_FUNCTIONS_STARTED_BY_EXECUTION_ID": "{% $states.context.Execution.Id %}",
          "dataResourceId": "{% $dataResourceId %}",
          "rootPipelineId": "{% $states.context.Execution.Input.rootPipelineId %}"
        }
      },
      "Next": "Update Success"
    },
    "Process Small Data Resource": {
      "Type": "Task",
      "Resource": "arn:aws:states:::batch:submitJob.sync",
      "Arguments": {
        "JobDefinition": "{% $config.process_data_resource_job_definition_arn %}",
        "JobName": "{% 'process-data-resource-' & $dataResourceId %}",
        "JobQueue": "{% $config.job_queue_arn %}",
        "ContainerOverrides": {
          "Environment": [
            {
              "Name": "DATA_RESOURCE_ID",
              "Value": "{% $dataResourceId %}"
            }
          ]
        }
      },
      "Next": "Update Success"
    },
    "Update Success": {
      "Type": "Task",
      "Resource": "arn:aws:states:::dynamodb:updateItem",
      "Arguments": {
        "TableName": "{% $config.dynamodb_table_name %}",
        "Key": {
          "PK": {
            "S": "{% 'DataResource|' & $dataResourceId %}"
          },
          "SK": {
            "S": "DataResource"
          }
        },
        "UpdateExpression": "SET LastSuccessTimestamp = :timestamp, LastSuccessHash = :hash",
        "ExpressionAttributeValues": {
          ":timestamp": {
            "S": "{% $now() %}"
          },
          ":hash": {
            "S": "{% $fileHash %}"
          }
        }
      },
      "Next": "Get or create EMR Cluster"
    },
    "Get or create EMR Cluster": {
      "Type": "Task",
      "Resource": "arn:aws:states:::states:startExecution.sync:2",
      "Arguments": {
        "StateMachineArn": "{% $config.get_or_create_emr_cluster_state_machine_arn %}",
        "Input": {
          "AWS_STEP_FUNCTIONS_STARTED_BY_EXECUTION_ID": "{% $states.context.Execution.Id %}",
          "rootPipelineId": "{% $states.context.Execution.Input.rootPipelineId %}"
        }
      },
      "Assign": {
        "clusterId": "{% $states.result.Output.clusterId %}"
      },
      "Next": "Sync EFS Data to HDFS"
    },
    "Sync EFS Data to HDFS": {
      "Type": "Task",
      "Resource": "arn:aws:states:::elasticmapreduce:addStep.sync",
      "Arguments": {
        "ClusterId": "{% $clusterId %}",
        "Step": {
          "Name": "{% 'sync-efs-index-data-to-hdfs-' & $dataResourceId %}",
          "ActionOnFailure": "CONTINUE",
          "HadoopJarStep": {
            "Jar": "s3://eu-west-1.elasticmapreduce/libs/script-runner/script-runner.jar",
            "Args": [
              "file:/opt/inbo/pipelines/bootstrap-actions/sync-index-data-to-hdfs.sh",
              "{% $states.context.Execution.Input.dataResourceId %}"
            ]
          }
        }
      },
      "Next": "Sampling",
      "Retry": [
        {
          "ErrorEquals": [
            "States.TaskFailed"
          ],
          "BackoffRate": 2,
          "IntervalSeconds": 1,
          "MaxAttempts": 3,
          "Comment": "Fails sometimes waiting for file copy?"
        }
      ]
    },
    "Sampling": {
      "Type": "Task",
      "Resource": "arn:aws:states:::elasticmapreduce:addStep.sync",
      "Arguments": {
        "ClusterId": "{% $clusterId %}",
        "Step": {
          "Name": "{% 'sampling-' & $dataResourceId %}",
          "ActionOnFailure": "CONTINUE",
          "HadoopJarStep": {
            "Jar": "command-runner.jar",
            "Args": [
              "spark-submit",
              "--deploy-mode",
              "client",
              "--class",
              "au.org.ala.pipelines.beam.SamplingPipeline",
              "{% '/opt/inbo/pipelines/pipelines-' & $config.pipelines_version & '.jar' %}",
              "{% '--datasetId=' & $dataResourceId %}",
              "--config=/opt/inbo/pipelines/config/la-pipelines.yaml"
            ]
          }
        }
      },
      "Next": "Sample layers"
    },
    "Sample layers": {
      "Type": "Task",
      "Resource": "arn:aws:states:::elasticmapreduce:addStep.sync",
      "Arguments": {
        "ClusterId": "{% $clusterId %}",
        "Step": {
          "Name": "{% 'sample-layers-' & $dataResourceId %}",
          "ActionOnFailure": "CONTINUE",
          "HadoopJarStep": {
            "Jar": "{% '/opt/inbo/pipelines/pipelines-' & $config.pipelines_version & '.jar' %}",
            "MainClass": "au.org.ala.sampling.LayerCrawler",
            "Args": [
              "{% '--datasetId=' & $dataResourceId %}",
              "--config=/opt/inbo/pipelines/config/la-pipelines.yaml",
              "--inputPath=hdfs:///."
            ]
          }
        }
      },
      "Next": "Parallel"
    },
    "Parallel": {
      "Type": "Parallel",
      "Branches": [
        {
          "StartAt": "Sync Indexed and Sampled EFS Data to HDFS",
          "States": {
            "Sync Indexed and Sampled EFS Data to HDFS": {
              "Type": "Task",
              "Resource": "arn:aws:states:::elasticmapreduce:addStep.sync",
              "Arguments": {
                "ClusterId": "{% $clusterId %}",
                "Step": {
                  "Name": "{% 'sync-hdfs-index-data-to-efs-' & $dataResourceId %}",
                  "ActionOnFailure": "CONTINUE",
                  "HadoopJarStep": {
                    "Jar": "s3://eu-west-1.elasticmapreduce/libs/script-runner/script-runner.jar",
                    "Args": [
                      "file:/opt/inbo/pipelines/bootstrap-actions/sync-to-efs.sh",
                      "{% $states.context.Execution.Input.dataResourceId %}"
                    ]
                  }
                }
              },
              "End": true
            }
          }
        },
        {
          "StartAt": "Clear Old Records",
          "States": {
            "Clear Old Records": {
              "Type": "Task",
              "Resource": "arn:aws:states:::lambda:invoke",
              "Output": "{% $states.result.Payload %}",
              "Arguments": {
                "FunctionName": "arn:aws:lambda:eu-west-1:632683202044:function:inbo-vbp-biocache-index-management:$LATEST",
                "Payload": {
                  "httpMethod": "POST",
                  "version": "2",
                  "headers": {
                    "content-type": "application/json"
                  },
                  "isBase64Encoded": false,
                  "rawQueryString": "",
                  "rawPath": "/",
                  "routeKey": "/",
                  "originatesFromStepFunction": true,
                  "body": "{% $string({\n  'query': 'mutation ClearDataResourceFromIndex($input: ClearDataResourceFromIndexInput!) { clearDataResourceFromIndex(input: $input) { indexId dataResourceId } }',\n'variables': {\n  'input': {\n    'indexId': $states.context.Execution.Input.solrCollection,\n  'dataResourceId': $dataResourceId\n  }\n}\n}) %}"
                }
              },
              "Retry": [
                {
                  "ErrorEquals": [
                    "Lambda.ServiceException",
                    "Lambda.AWSLambdaException",
                    "Lambda.SdkClientException",
                    "Lambda.TooManyRequestsException"
                  ],
                  "IntervalSeconds": 1,
                  "MaxAttempts": 3,
                  "BackoffRate": 2,
                  "JitterStrategy": "FULL"
                }
              ],
              "Next": "Solr"
            },
            "Solr": {
              "Type": "Task",
              "Resource": "arn:aws:states:::elasticmapreduce:addStep.sync",
              "Arguments": {
                "ClusterId": "{% $clusterId %}",
                "Step": {
                  "Name": "{% 'solr-' & $dataResourceId %}",
                  "ActionOnFailure": "CONTINUE",
                  "HadoopJarStep": {
                    "Jar": "command-runner.jar",
                    "Args": [
                      "spark-submit",
                      "--deploy-mode",
                      "client",
                      "--conf",
                      "spark.yarn.executor.memoryOverheadFactor=0.5",
                      "--class",
                      "au.org.ala.pipelines.beam.IndexRecordToSolrPipeline",
                      "{% '/opt/inbo/pipelines/pipelines-' & $config.pipelines_version & '.jar' %}",
                      "{% '--datasetId=' & $dataResourceId %}",
                      "--config=/opt/inbo/pipelines/config/la-pipelines.yaml",
                      "{% '--solrCollection=' & $states.context.Execution.Input.solrCollection %}"
                    ]
                  }
                }
              },
              "End": true
            }
          }
        }
      ],
      "End": true
    },
    "Fail": {
      "Type": "Fail",
      "Error": "MissingConnectionParams",
      "Cause": "The Data Resources does not have any connection params configured"
    }
  },
  "QueryLanguage": "JSONata"
}