scalar Date

schema {
	query: Query
	mutation: Mutation
}

type Query {
	################ INDEX ##############
	index(id: ID!): Index
	indices: [Index!]!
	activeIndex: Index

	############## PIPELINE #############
	pipeline(id: ID!): Pipeline
	pipelines(status: PipelineStatus): [Pipeline!]!
	dataResourceHistory(input: DataResourceHistoryInput!): DataResourceHistoryOutput!

	############ DATA RESOURCE ###########
	dataResource(id: ID!): DataResource
	dataResources: [DataResource!]!
}

type Mutation {
	################ INDEX ##############
	getOrCreateIndex(input: GetOrCreateIndexInput!): GetOrCreateIndexOutput!
	deleteIndex(input: DeleteIndexInput!): DeleteIndexOutput!
	clearDataResourceFromIndex(input: ClearDataResourceFromIndexInput!): ClearDataResourceFromIndexOutput!
	setActiveIndex(input: SetActiveIndexInput!): SetActiveIndexOutput!

	############## PIPELINE #############
	startPipeline(input: StartPipelineInput!): StartPipelineOutput!
	cancelPipeline(input: CancelPipelineInput!): CancelPipelineOutput!
}

############## INDEX #############
type Index  {
	id: ID!
	active: Boolean
	counts: IndexCounts
}

type IndexCounts {
	total: Int!
	dataResourceCounts: [DataResourceCount!]!
}

type DataResourceCount {
	dataResourceId: ID!
	count: Int!
}

input GetOrCreateIndexInput {
	indexId: ID!
}

type GetOrCreateIndexOutput {
	indexId: ID!

}

input DeleteIndexInput {
	indexId: ID!
}

type DeleteIndexOutput {
	indexId: ID!
}

input ClearDataResourceFromIndexInput {
	indexId: ID!
	dataResourceId: ID!
}

type ClearDataResourceFromIndexOutput {
	indexId: ID!
	dataResourceId: ID!
}

input SetActiveIndexInput {
	indexId: ID!
}

type SetActiveIndexOutput {
	index: Index!
}

############ PIPELINE ###########
type Pipeline {
	id: ID!
	status: PipelineStatus!
	startedAt: Date
	stoppedAt: Date
	input: String
	output: String
	error: String
	cause: String

	progress: PipelineProgress
}

enum PipelineStatus {
	RUNNING
	SUCCEEDED
	FAILED
	TIMED_OUT
	ABORTED
}

input DataResourceHistoryInput {
	dataResourceId: ID!
}

type DataResourceEvent {
	dataResourceId: ID!
	rootPipelineId: ID!
	executionId: ID!
	event: String!
	timestamp: String!
	lastUpdated: String!
}

enum DataResourceProgressState {
	QUEUED
	RUNNING
	COMPLETED
	FAILED
}

enum DataResourceProgressStep {
	DOWNLOAD
	INDEX
	SAMPLE
	SOLR
}

type PipelineStepProgress {
	step: DataResourceProgressStep!
	queued: Int!
	running: Int!
	completed: Int!
	failed: Int!
}

type PipelineProgress {
	total: Int!
	completed: Int!
	failed: Int!

	stepProgress: [PipelineStepProgress!]!
	dataResourceProgress(step: DataResourceProgressStep, state: DataResourceProgressState): [DataResourceProgress!]!
}

type DataResourceProgress {
	dataResource: DataResource
	state: DataResourceProgressState!
	step: DataResourceProgressStep!
	startedAt: String
	stoppedAt: String
}

type DataResourceHistoryOutput {
	events: [DataResourceEvent!]!
}

input StartPipelineInput {
	dataResourceIds: [ID!]!
	solrCollection: String
}

type StartPipelineOutput {
	pipeline: Pipeline!

}

input CancelPipelineInput {
	id: ID!
}

type CancelPipelineOutput {
	pipeline: Pipeline!
}

############ DATA RESOURCE ###########
type DataResource {
	id: ID!
	name: String
	description: String
}