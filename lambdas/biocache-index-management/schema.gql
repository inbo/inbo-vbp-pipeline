scalar Date
scalar Duration

schema {
  query: Query
  mutation: Mutation
}

type Query {
  ################ INDEX ##############
  index(id: ID!): Index
  indices: [Index!]!
  activeIndex: Index

  ############## PIPELINE #############
  pipeline(id: ID!): Pipeline
  pipelines(status: PipelineStatus): [Pipeline!]!
  dataResourceHistory(
    input: DataResourceHistoryInput!
  ): DataResourceHistoryOutput!

  ############ DATA RESOURCE ###########
  dataResource(id: ID!): DataResource
  dataResources: [DataResource!]!
}

type Mutation {
  ################ INDEX ##############
  getOrCreateIndex(input: GetOrCreateIndexInput!): GetOrCreateIndexOutput!
  deleteIndex(input: DeleteIndexInput!): DeleteIndexOutput!
  clearDataResourceFromIndex(
    input: ClearDataResourceFromIndexInput!
  ): ClearDataResourceFromIndexOutput!
  setActiveIndex(input: SetActiveIndexInput!): SetActiveIndexOutput!

  ############## PIPELINE #############
  startPipeline(input: StartPipelineInput!): StartPipelineOutput!
  cancelPipeline(input: CancelPipelineInput!): CancelPipelineOutput!
}

############## INDEX #############
type Index {
  id: ID!
  active: Boolean
  counts: IndexCounts
}

type IndexCounts {
  total: Int!
  dataResourceCounts: [DataResourceCount!]!
}

type DataResourceCount {
  dataResourceId: ID!
  count: Int!
}

input GetOrCreateIndexInput {
  indexId: ID!
}

type GetOrCreateIndexOutput {
  indexId: ID!
}

input DeleteIndexInput {
  indexId: ID!
}

type DeleteIndexOutput {
  indexId: ID!
}

input ClearDataResourceFromIndexInput {
  indexId: ID!
  dataResourceId: ID!
}

type ClearDataResourceFromIndexOutput {
  indexId: ID!
  dataResourceId: ID!
}

input SetActiveIndexInput {
  indexId: ID!
}

type SetActiveIndexOutput {
  index: Index!
}

############ PIPELINE ###########
type Pipeline {
  id: ID!
  executionArn: String!
  status: PipelineStatus!
  startedAt: Date
  stoppedAt: Date
  duration: Duration
  input: String
  output: String
  error: String
  cause: String

  stats: PipelineStats
  dataResourceProgress(
    step: PipelineStep!
    state: PipelineStepState
    first: Int
    after: ID
    last: Int
    before: ID
  ): DataResourceProgressConnection
  dataResource(id: ID!): PipelineDataResourceDetails
}

enum PipelineStatus {
  RUNNING
  SUCCEEDED
  FAILED
  TIMED_OUT
  ABORTED
}

input DataResourceHistoryInput {
  dataResourceId: ID!
}

type DataResourceEvent {
  dataResourceId: ID!
  rootPipelineId: ID!
  executionId: ID!
  event: String!
  timestamp: String!
  lastUpdated: String!
}

enum PipelineStepState {
  QUEUED
  RUNNING
  SUCCEEDED
  SKIPPED
  FAILED
}

enum PipelineStep {
  DOWNLOAD
  INDEX
  SAMPLE
  SOLR
}

type PipelineTotalStats {
  total: Int!
  queued: Int!
  running: Int!
  succeeded: Int!
  skipped: Int!
  failed: Int!
}

type PipelineStepStats {
  step: PipelineStep!
  total: Int!
  queued: Int!
  running: Int!
  succeeded: Int!
  skipped: Int!
  failed: Int!
}

type PipelineStats {
  total: PipelineTotalStats!
  steps: [PipelineStepStats!]!
}

type DataResourceProgress {
  dataResource: DataResource
  state: PipelineStepState!
  step: PipelineStep!
  error: String
  cause: String
  timestamp: Date
}

type PipelineDataResourceDetails {
  dataResource: DataResource!
  steps: [DataResourceProgress!]!
}

type DataResourceProgressConnection {
  totalCount: Int
  edges: [DataResourceProgressEdge]
  pageInfo: PageInfo!
}

type DataResourceProgressEdge {
  cursor: ID!
  node: DataResourceProgress!
}

type DataResourceHistoryOutput {
  events: [DataResourceEvent!]!
}

input StartPipelineInput {
  dataResourceIds: [ID!]!
  solrCollection: String
  resetAllData: Boolean
  forceDownload: Boolean
  forceIndex: Boolean
  forceSample: Boolean
  forceSolr: Boolean
  switchIndex: Boolean
}

type StartPipelineOutput {
  pipeline: Pipeline!
}

input CancelPipelineInput {
  id: ID!
}

type CancelPipelineOutput {
  pipeline: Pipeline!
}

############ DATA RESOURCE ###########
type DataResource {
  id: ID!
  name: String
  description: String
  url: String

  createdAt: Date
  checkedAt: Date
  updatedAt: Date
  processedAt: Date

  new: Boolean
  updated: Boolean

  processingState: DataResourceProcessingState
}

type DataResourceProcessingState {
  downloadedAt: Date
  indexedAt: Date
  sampledAt: Date
  uploadedAt: Date
  uploadedTo: [Index]
}

############ COMMON ##################
type PageInfo {
  startCursor: ID
  endCursor: ID
  hasNextPage: Boolean!
}
