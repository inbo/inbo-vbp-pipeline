schema {
	query: Query
	mutation: Mutation
}

type Query {
	################ INDEX ##############
	index(id: ID!): Index
	indices: [Index!]!
	activeIndex: Index

	############## PIPELINE #############
	pipeline(id: ID!): Pipeline
	pipelines: [Pipeline!]!
	dataResourceHistory(input: DataResourceHistoryInput!): DataResourceHistoryOutput!
}

type Mutation {
	################ INDEX ##############
	getOrCreateIndex(input: GetOrCreateIndexInput!): GetOrCreateIndexOutput!
	deleteIndex(input: DeleteIndexInput!): DeleteIndexOutput!
	clearDataResourceFromIndex(input: ClearDataResourceFromIndexInput!): ClearDataResourceFromIndexOutput!
	setActiveIndex(input: SetActiveIndexInput!): SetActiveIndexOutput!

	############## PIPELINE #############
	startPipeline(input: StartPipelineInput!): StartPipelineOutput!
	cancelPipeline(input: CancelPipelineInput!): CancelPipelineOutput!
}

############## INDEX #############
type Index {
	id: ID!
}

input GetOrCreateIndexInput {
	indexId: ID!
}

type GetOrCreateIndexOutput {
	indexId: ID!

}

input DeleteIndexInput {
	indexId: ID!
}

type DeleteIndexOutput {
	indexId: ID!
}

input ClearDataResourceFromIndexInput {
	indexId: ID!
	dataResourceId: ID!
}

type ClearDataResourceFromIndexOutput {
	indexId: ID!
	dataResourceId: ID!
}

input SetActiveIndexInput {
	indexId: ID!
}

type SetActiveIndexOutput {
	indexId: ID!
}

############ PIPELINE ###########
type Pipeline {
	id: ID!
}

input DataResourceHistoryInput {
	dataResourceId: ID!
}

type DataResourceEvent {
	dataResourceId: ID!
	rootPipelineId: ID!
	executionId: ID!
	event: String!
	timestamp: String!
	lastUpdated: String!
}

type DataResourceHistoryOutput {
	events: [DataResourceEvent!]!
}

input StartPipelineInput {
	dataResourceIds: [ID!]!
	solrCollection: String
}

type StartPipelineOutput {
	pipeline: Pipeline!

}

input CancelPipelineInput {
	id: ID!
}

type CancelPipelineOutput {
	pipeline: Pipeline!
}
